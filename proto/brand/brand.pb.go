// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/brand/brand.proto

package brand

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 数据库 Brands
type Brand struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Logo                 string   `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
	Desc                 string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	CreatedAt            string   `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Brand) Reset()         { *m = Brand{} }
func (m *Brand) String() string { return proto.CompactTextString(m) }
func (*Brand) ProtoMessage()    {}
func (*Brand) Descriptor() ([]byte, []int) {
	return fileDescriptor_008f96e71eedc037, []int{0}
}

func (m *Brand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Brand.Unmarshal(m, b)
}
func (m *Brand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Brand.Marshal(b, m, deterministic)
}
func (m *Brand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Brand.Merge(m, src)
}
func (m *Brand) XXX_Size() int {
	return xxx_messageInfo_Brand.Size(m)
}
func (m *Brand) XXX_DiscardUnknown() {
	xxx_messageInfo_Brand.DiscardUnknown(m)
}

var xxx_messageInfo_Brand proto.InternalMessageInfo

func (m *Brand) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Brand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Brand) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Brand) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Brand) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Brand) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ListQuery struct {
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page                 int64    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Sort                 string   `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListQuery) Reset()         { *m = ListQuery{} }
func (m *ListQuery) String() string { return proto.CompactTextString(m) }
func (*ListQuery) ProtoMessage()    {}
func (*ListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_008f96e71eedc037, []int{1}
}

func (m *ListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListQuery.Unmarshal(m, b)
}
func (m *ListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListQuery.Marshal(b, m, deterministic)
}
func (m *ListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListQuery.Merge(m, src)
}
func (m *ListQuery) XXX_Size() int {
	return xxx_messageInfo_ListQuery.Size(m)
}
func (m *ListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListQuery proto.InternalMessageInfo

func (m *ListQuery) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListQuery) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListQuery) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

type Request struct {
	ListQuery            *ListQuery `protobuf:"bytes,1,opt,name=list_query,json=listQuery,proto3" json:"list_query,omitempty"`
	Brand                *Brand     `protobuf:"bytes,2,opt,name=Brand,proto3" json:"Brand,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_008f96e71eedc037, []int{2}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetListQuery() *ListQuery {
	if m != nil {
		return m.ListQuery
	}
	return nil
}

func (m *Request) GetBrand() *Brand {
	if m != nil {
		return m.Brand
	}
	return nil
}

type Response struct {
	Brand                *Brand   `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand,omitempty"`
	Brands               []*Brand `protobuf:"bytes,2,rep,name=brands,proto3" json:"brands,omitempty"`
	Valid                bool     `protobuf:"varint,3,opt,name=valid,proto3" json:"valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_008f96e71eedc037, []int{3}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetBrand() *Brand {
	if m != nil {
		return m.Brand
	}
	return nil
}

func (m *Response) GetBrands() []*Brand {
	if m != nil {
		return m.Brands
	}
	return nil
}

func (m *Response) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func init() {
	proto.RegisterType((*Brand)(nil), "brand.Brand")
	proto.RegisterType((*ListQuery)(nil), "brand.ListQuery")
	proto.RegisterType((*Request)(nil), "brand.Request")
	proto.RegisterType((*Response)(nil), "brand.Response")
}

func init() { proto.RegisterFile("proto/brand/brand.proto", fileDescriptor_008f96e71eedc037) }

var fileDescriptor_008f96e71eedc037 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0xfd, 0x92, 0x34, 0xf9, 0x9a, 0xa9, 0x54, 0x59, 0x04, 0x83, 0x20, 0x94, 0xe0, 0xa1, 0x22,
	0xb4, 0x50, 0x7f, 0x41, 0xab, 0x20, 0x82, 0x17, 0x17, 0xbc, 0x5a, 0xd2, 0xee, 0x50, 0x56, 0xd2,
	0x26, 0xcd, 0x6e, 0x05, 0x7f, 0x86, 0xff, 0xd1, 0x1f, 0x22, 0x33, 0xbb, 0xcd, 0x41, 0x2f, 0xb9,
	0x84, 0x37, 0xef, 0xbd, 0xcc, 0xbc, 0xd9, 0x5d, 0xb8, 0xa8, 0x9b, 0xca, 0x56, 0xd3, 0x55, 0x53,
	0xec, 0x94, 0xfb, 0x4e, 0x98, 0x11, 0x31, 0x17, 0xf9, 0x57, 0x00, 0xf1, 0x82, 0x90, 0x18, 0x42,
	0xa8, 0x55, 0x16, 0x8c, 0x82, 0x71, 0x24, 0x43, 0xad, 0x84, 0x80, 0xde, 0xae, 0xd8, 0x62, 0x16,
	0x8e, 0x82, 0x71, 0x2a, 0x19, 0x13, 0x57, 0x56, 0x9b, 0x2a, 0x8b, 0x1c, 0x47, 0x98, 0x38, 0x85,
	0x66, 0x9d, 0xf5, 0x1c, 0x47, 0x58, 0x5c, 0x01, 0xac, 0x1b, 0x2c, 0x2c, 0xaa, 0x65, 0x61, 0xb3,
	0x98, 0x95, 0xd4, 0x33, 0x73, 0x4b, 0xf2, 0xa1, 0x56, 0x47, 0x39, 0x71, 0xb2, 0x67, 0xe6, 0x36,
	0x7f, 0x82, 0xf4, 0x59, 0x1b, 0xfb, 0x72, 0xc0, 0xe6, 0x53, 0x9c, 0x43, 0x5c, 0xea, 0xad, 0xb6,
	0x3e, 0x99, 0x2b, 0x68, 0x68, 0x5d, 0x6c, 0x5c, 0xb8, 0x48, 0x32, 0x26, 0xce, 0x54, 0x8d, 0x3d,
	0x86, 0x23, 0x9c, 0xbf, 0xc1, 0x7f, 0x89, 0xfb, 0x03, 0x1a, 0x2b, 0xa6, 0x00, 0xa5, 0x36, 0x76,
	0xb9, 0xa7, 0xb6, 0xdc, 0x6d, 0x30, 0x3b, 0x9b, 0xb8, 0x23, 0x69, 0xc7, 0xc9, 0xb4, 0x6c, 0x27,
	0xe7, 0xfe, 0x64, 0x78, 0xc8, 0x60, 0x76, 0xe2, 0xbd, 0xcc, 0x49, 0x27, 0xe5, 0xef, 0xd0, 0x97,
	0x68, 0xea, 0x6a, 0x67, 0x90, 0xfc, 0xec, 0xf0, 0xbd, 0x7f, 0xf9, 0xb9, 0x10, 0xd7, 0x90, 0x30,
	0x30, 0x59, 0x38, 0x8a, 0xfe, 0x98, 0xbc, 0x46, 0x3b, 0x7f, 0x14, 0xa5, 0x56, 0xbc, 0x4a, 0x5f,
	0xba, 0x62, 0xf6, 0x1d, 0x40, 0xb2, 0x70, 0x86, 0x1b, 0xe8, 0x51, 0x64, 0x31, 0xf4, 0xbf, 0xfb,
	0x1d, 0x2f, 0x4f, 0xdb, 0xda, 0x65, 0xca, 0xff, 0x89, 0x31, 0x44, 0x8f, 0xd8, 0xc9, 0x79, 0x0b,
	0xc9, 0x3d, 0x5f, 0x51, 0x47, 0xf3, 0x2b, 0x5f, 0x58, 0x47, 0xf3, 0x03, 0x96, 0xd8, 0xc9, 0xbc,
	0x4a, 0xf8, 0x7d, 0xde, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0x63, 0x8e, 0xb4, 0xef, 0xba, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Brands service

type BrandsClient interface {
	// 获取品牌列表
	List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 根据 唯一 获取品牌信息
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 创建品牌
	Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 更新品牌
	Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 删除品牌
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type brandsClient struct {
	c           client.Client
	serviceName string
}

func NewBrandsClient(serviceName string, c client.Client) BrandsClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "brand"
	}
	return &brandsClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *brandsClient) List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Brands.List", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Brands.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Brands.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Brands.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brandsClient) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Brands.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Brands service

type BrandsHandler interface {
	// 获取品牌列表
	List(context.Context, *Request, *Response) error
	// 根据 唯一 获取品牌信息
	Get(context.Context, *Request, *Response) error
	// 创建品牌
	Create(context.Context, *Request, *Response) error
	// 更新品牌
	Update(context.Context, *Request, *Response) error
	// 删除品牌
	Delete(context.Context, *Request, *Response) error
}

func RegisterBrandsHandler(s server.Server, hdlr BrandsHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Brands{hdlr}, opts...))
}

type Brands struct {
	BrandsHandler
}

func (h *Brands) List(ctx context.Context, in *Request, out *Response) error {
	return h.BrandsHandler.List(ctx, in, out)
}

func (h *Brands) Get(ctx context.Context, in *Request, out *Response) error {
	return h.BrandsHandler.Get(ctx, in, out)
}

func (h *Brands) Create(ctx context.Context, in *Request, out *Response) error {
	return h.BrandsHandler.Create(ctx, in, out)
}

func (h *Brands) Update(ctx context.Context, in *Request, out *Response) error {
	return h.BrandsHandler.Update(ctx, in, out)
}

func (h *Brands) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.BrandsHandler.Delete(ctx, in, out)
}
