// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/category/category.proto

package category

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 数据库 categories
type Category struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Parent               int64    `protobuf:"varint,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt            string   `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Category) Reset()         { *m = Category{} }
func (m *Category) String() string { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()    {}
func (*Category) Descriptor() ([]byte, []int) {
	return fileDescriptor_32a5182aa9660324, []int{0}
}

func (m *Category) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Category.Unmarshal(m, b)
}
func (m *Category) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Category.Marshal(b, m, deterministic)
}
func (m *Category) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Category.Merge(m, src)
}
func (m *Category) XXX_Size() int {
	return xxx_messageInfo_Category.Size(m)
}
func (m *Category) XXX_DiscardUnknown() {
	xxx_messageInfo_Category.DiscardUnknown(m)
}

var xxx_messageInfo_Category proto.InternalMessageInfo

func (m *Category) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Category) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *Category) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Category) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Category) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type ListQuery struct {
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page                 int64    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Sort                 string   `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListQuery) Reset()         { *m = ListQuery{} }
func (m *ListQuery) String() string { return proto.CompactTextString(m) }
func (*ListQuery) ProtoMessage()    {}
func (*ListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_32a5182aa9660324, []int{1}
}

func (m *ListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListQuery.Unmarshal(m, b)
}
func (m *ListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListQuery.Marshal(b, m, deterministic)
}
func (m *ListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListQuery.Merge(m, src)
}
func (m *ListQuery) XXX_Size() int {
	return xxx_messageInfo_ListQuery.Size(m)
}
func (m *ListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListQuery proto.InternalMessageInfo

func (m *ListQuery) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListQuery) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListQuery) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

type Request struct {
	ListQuery            *ListQuery `protobuf:"bytes,1,opt,name=list_query,json=listQuery,proto3" json:"list_query,omitempty"`
	Category             *Category  `protobuf:"bytes,2,opt,name=Category,proto3" json:"Category,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_32a5182aa9660324, []int{2}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetListQuery() *ListQuery {
	if m != nil {
		return m.ListQuery
	}
	return nil
}

func (m *Request) GetCategory() *Category {
	if m != nil {
		return m.Category
	}
	return nil
}

type Response struct {
	Category             *Category   `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Categorys            []*Category `protobuf:"bytes,2,rep,name=categorys,proto3" json:"categorys,omitempty"`
	Valid                bool        `protobuf:"varint,3,opt,name=valid,proto3" json:"valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_32a5182aa9660324, []int{3}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCategory() *Category {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *Response) GetCategorys() []*Category {
	if m != nil {
		return m.Categorys
	}
	return nil
}

func (m *Response) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func init() {
	proto.RegisterType((*Category)(nil), "category.Category")
	proto.RegisterType((*ListQuery)(nil), "category.ListQuery")
	proto.RegisterType((*Request)(nil), "category.Request")
	proto.RegisterType((*Response)(nil), "category.Response")
}

func init() { proto.RegisterFile("proto/category/category.proto", fileDescriptor_32a5182aa9660324) }

var fileDescriptor_32a5182aa9660324 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x6a, 0xe3, 0x30,
	0x10, 0x5d, 0xdb, 0x49, 0xd6, 0x9e, 0xc0, 0xc2, 0xce, 0x2e, 0xc5, 0x14, 0x02, 0xc1, 0xa7, 0x9c,
	0x9c, 0xd6, 0xfd, 0x82, 0x90, 0x42, 0x29, 0xf4, 0x52, 0x41, 0xcf, 0x41, 0x8d, 0x87, 0x20, 0x50,
	0x62, 0xc7, 0x52, 0x0a, 0xb9, 0x96, 0xfe, 0x52, 0xff, 0xaf, 0x48, 0x96, 0xec, 0x1e, 0x5a, 0xa8,
	0x6f, 0x33, 0x6f, 0xde, 0x9b, 0x37, 0x7e, 0xc8, 0x30, 0xab, 0x9b, 0x4a, 0x57, 0xcb, 0x2d, 0xd7,
	0xb4, 0xab, 0x9a, 0x73, 0x57, 0xe4, 0x16, 0xc7, 0xd8, 0xf7, 0xd9, 0x5b, 0x00, 0xf1, 0xda, 0x35,
	0xf8, 0x07, 0x42, 0x51, 0xa6, 0xc1, 0x3c, 0x58, 0x44, 0x2c, 0x14, 0x25, 0x5e, 0xc0, 0xa4, 0xe6,
	0x0d, 0x1d, 0x74, 0x1a, 0x5a, 0xcc, 0x75, 0x88, 0x30, 0x3a, 0xf0, 0x3d, 0xa5, 0xd1, 0x3c, 0x58,
	0x24, 0xcc, 0xd6, 0x38, 0x03, 0xd8, 0x36, 0xc4, 0x35, 0x95, 0x1b, 0xae, 0xd3, 0x91, 0x9d, 0x24,
	0x0e, 0x59, 0x69, 0x33, 0x3e, 0xd5, 0xa5, 0x1f, 0x8f, 0xdb, 0xb1, 0x43, 0x56, 0x3a, 0xbb, 0x87,
	0xe4, 0x41, 0x28, 0xfd, 0x78, 0xa2, 0xe6, 0x8c, 0xff, 0x61, 0x2c, 0xc5, 0x5e, 0x68, 0x77, 0x49,
	0xdb, 0x18, 0xd3, 0x9a, 0xef, 0xc8, 0x9d, 0x62, 0x6b, 0x83, 0xa9, 0xaa, 0xd1, 0xfe, 0x10, 0x53,
	0x67, 0x7b, 0xf8, 0xcd, 0xe8, 0x78, 0x22, 0xa5, 0xb1, 0x00, 0x90, 0x42, 0xe9, 0xcd, 0xd1, 0xac,
	0xb5, 0xdb, 0xa6, 0xc5, 0xbf, 0xbc, 0xcb, 0xa2, 0x73, 0x64, 0x89, 0xec, 0xcc, 0xf3, 0x3e, 0x0f,
	0x6b, 0x35, 0x2d, 0xb0, 0x57, 0xf8, 0x09, 0xeb, 0x38, 0xd9, 0x6b, 0x00, 0x31, 0x23, 0x55, 0x57,
	0x07, 0x45, 0x46, 0xec, 0xb9, 0xce, 0xee, 0x4b, 0xb1, 0x87, 0xf0, 0x0a, 0x12, 0x5f, 0xab, 0x34,
	0x9c, 0x47, 0xdf, 0x08, 0x7a, 0x92, 0xc9, 0xe6, 0x85, 0x4b, 0x51, 0xda, 0x4f, 0x8e, 0x59, 0xdb,
	0x14, 0xef, 0x21, 0x24, 0xeb, 0x8e, 0x93, 0x43, 0xb4, 0x92, 0x12, 0xff, 0xf6, 0x9b, 0x5c, 0x20,
	0x97, 0xf8, 0x19, 0x6a, 0x6f, 0xce, 0x7e, 0xe1, 0x12, 0x46, 0x26, 0x8a, 0x9f, 0x0b, 0x72, 0x88,
	0xee, 0x68, 0x00, 0xff, 0x1a, 0x26, 0x6b, 0xfb, 0x12, 0x06, 0x49, 0x9e, 0xec, 0xeb, 0x18, 0x24,
	0xb9, 0x25, 0x49, 0x03, 0x24, 0xcf, 0x13, 0xfb, 0x3b, 0xdc, 0x7c, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x55, 0xa8, 0x1a, 0x69, 0x2f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Categorys service

type CategorysClient interface {
	// 全部分类
	All(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 获取分类列表
	List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 根据 唯一 获取分类信息
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 创建分类
	Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 更新分类
	Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 删除分类
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type categorysClient struct {
	c           client.Client
	serviceName string
}

func NewCategorysClient(serviceName string, c client.Client) CategorysClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "category"
	}
	return &categorysClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *categorysClient) All(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Categorys.All", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysClient) List(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Categorys.List", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysClient) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Categorys.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysClient) Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Categorys.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysClient) Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Categorys.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categorysClient) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Categorys.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Categorys service

type CategorysHandler interface {
	// 全部分类
	All(context.Context, *Request, *Response) error
	// 获取分类列表
	List(context.Context, *Request, *Response) error
	// 根据 唯一 获取分类信息
	Get(context.Context, *Request, *Response) error
	// 创建分类
	Create(context.Context, *Request, *Response) error
	// 更新分类
	Update(context.Context, *Request, *Response) error
	// 删除分类
	Delete(context.Context, *Request, *Response) error
}

func RegisterCategorysHandler(s server.Server, hdlr CategorysHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Categorys{hdlr}, opts...))
}

type Categorys struct {
	CategorysHandler
}

func (h *Categorys) All(ctx context.Context, in *Request, out *Response) error {
	return h.CategorysHandler.All(ctx, in, out)
}

func (h *Categorys) List(ctx context.Context, in *Request, out *Response) error {
	return h.CategorysHandler.List(ctx, in, out)
}

func (h *Categorys) Get(ctx context.Context, in *Request, out *Response) error {
	return h.CategorysHandler.Get(ctx, in, out)
}

func (h *Categorys) Create(ctx context.Context, in *Request, out *Response) error {
	return h.CategorysHandler.Create(ctx, in, out)
}

func (h *Categorys) Update(ctx context.Context, in *Request, out *Response) error {
	return h.CategorysHandler.Update(ctx, in, out)
}

func (h *Categorys) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.CategorysHandler.Delete(ctx, in, out)
}
